domNodes = inspect($$('body'));
          
          function createDV() {

          // gets document.body's child nodes which are direct child html elements
        let keysArray = Object.keys(domNodes[0].children);
        
        console.log('keys', keysArray)
          // initialize empty array to store root node objects
            let rootNodes = [];

            function findRoots() {

          // iterate through keysArray to push only Vue root nodes into rootNodes array
              for (let i = 0; i < keysArray.length; i += 1) {
                const testNode = domNodes[0].children[keysArray[i]];
              if (!rootNodes.includes(testNode) &&  testNode.__vue__) rootNodes.push(testNode);
            }

              return rootNodes;
            };

            const roots = findRoots();

            const components = [];
            const componentNames = [];

            function findComponents(node) {
              let childrenArray;

              if (rootNodes.includes(node)) {
                console.log('findcomponentsroot'); 
                childrenArray = node.__vue__.$children;
              }
              else {
                console.log('findcomponentschild'); 
                childrenArray = node.$children;
              }

              childrenArray.forEach((child) => {
                components.push(child);
                componentNames.push(child.$vnode.tag.replace(/vue-component-\d-/g, ''));
                console.log(components)
                if(child.$children.length > 0) findComponents(child)
              });

            };


            function CompConstructor(node) {
          // -> _uid
              this.id = node._uid;
          // $vnode -> .tag -> replace(/vue-component-\d-/g, '')
              this.name = node.$vnode.tag.replace(/vue-component-\d-/g, '');
          // $parent -> _uid
              this.parent = node.$parent._uid;
          //
              this.children = [];
          // grab _data object - get keys array - filter keys - forEach on new array to add props to this object
              this.variables = [];
              this.props = [];
              this.slots = [];
          // this.directives = [];
            }

            const fullComponents = [];
            console.log('root', rootNodes)

            for (let i = 0; i < rootNodes.length; i += 1) {
              console.log('hit a root')
              findComponents(rootNodes[i])
            }

            console.log('full', components)
            const dvComponents = [];

            function createDvComps(fullComponents) {

              for (let i = 0; i < fullComponents.length; i += 1) {

              node = fullComponents[i];

              dvComponents.push(new CompConstructor(node));

              const varKeys = Object.keys(node.$data).filter((key) => {
                if (key.match(/\s/g)) return false;
                return true;
              });

              if (varKeys) {
                varKeys.forEach((variable) => {
                  if (variable) dvComponents[dvComponents.length - 1].variables.push({ [variable]: node.$data[variable] });
                });
              }

              if(node.$slots.default) 
                {
                  dvComponents[dvComponents.length - 1].slots.push(node.$slots.default[0].text);
              }    

          }
              return dvComponents;
            };

            createDvComps(components);
            console.log('dv2',dvComponents)
            return dvComponents

      }
          

          window.setTimeout(createDV, 1000); 
          createDV()